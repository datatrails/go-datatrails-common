// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
	azbus "github.com/datatrails/go-datatrails-common/azbus"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Disposer is an autogenerated mock type for the Disposer type
type Disposer struct {
	mock.Mock
}

type Disposer_Expecter struct {
	mock *mock.Mock
}

func (_m *Disposer) EXPECT() *Disposer_Expecter {
	return &Disposer_Expecter{mock: &_m.Mock}
}

// Dispose provides a mock function with given fields: ctx, d, err, msg
func (_m *Disposer) Dispose(ctx context.Context, d azbus.Disposition, err error, msg *azservicebus.ReceivedMessage) {
	_m.Called(ctx, d, err, msg)
}

// Disposer_Dispose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispose'
type Disposer_Dispose_Call struct {
	*mock.Call
}

// Dispose is a helper method to define mock.On call
//   - ctx context.Context
//   - d azbus.Disposition
//   - err error
//   - msg *azservicebus.ReceivedMessage
func (_e *Disposer_Expecter) Dispose(ctx interface{}, d interface{}, err interface{}, msg interface{}) *Disposer_Dispose_Call {
	return &Disposer_Dispose_Call{Call: _e.mock.On("Dispose", ctx, d, err, msg)}
}

func (_c *Disposer_Dispose_Call) Run(run func(ctx context.Context, d azbus.Disposition, err error, msg *azservicebus.ReceivedMessage)) *Disposer_Dispose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(azbus.Disposition), args[2].(error), args[3].(*azservicebus.ReceivedMessage))
	})
	return _c
}

func (_c *Disposer_Dispose_Call) Return() *Disposer_Dispose_Call {
	_c.Call.Return()
	return _c
}

func (_c *Disposer_Dispose_Call) RunAndReturn(run func(context.Context, azbus.Disposition, error, *azservicebus.ReceivedMessage)) *Disposer_Dispose_Call {
	_c.Call.Return(run)
	return _c
}

// NewDisposer creates a new instance of Disposer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisposer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Disposer {
	mock := &Disposer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
