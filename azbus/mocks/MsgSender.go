// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
	azbus "github.com/rkvst/go-rkvstcommon/azbus"

	mock "github.com/stretchr/testify/mock"
)

// MsgSender is an autogenerated mock type for the MsgSender type
type MsgSender struct {
	mock.Mock
}

// Close provides a mock function with given fields: _a0
func (_m *MsgSender) Close(_a0 context.Context) {
	_m.Called(_a0)
}

// GetAZClient provides a mock function with given fields:
func (_m *MsgSender) GetAZClient() azbus.AZClient {
	ret := _m.Called()

	var r0 azbus.AZClient
	if rf, ok := ret.Get(0).(func() azbus.AZClient); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(azbus.AZClient)
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *MsgSender) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: _a0, _a1, _a2
func (_m *MsgSender) Send(_a0 context.Context, _a1 []byte, _a2 ...azbus.OutMessageOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, ...azbus.OutMessageOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMsg provides a mock function with given fields: _a0, _a1, _a2
func (_m *MsgSender) SendMsg(_a0 context.Context, _a1 azservicebus.Message, _a2 ...azbus.OutMessageOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, azservicebus.Message, ...azbus.OutMessageOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *MsgSender) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMsgSender interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgSender creates a new instance of MsgSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgSender(t mockConstructorTestingTNewMsgSender) *MsgSender {
	mock := &MsgSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
