// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
	azbus "github.com/datatrails/go-datatrails-common/azbus"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MsgSender is an autogenerated mock type for the MsgSender type
type MsgSender struct {
	mock.Mock
}

// BatchAddMessage provides a mock function with given fields: batch, m, options
func (_m *MsgSender) BatchAddMessage(batch *azservicebus.MessageBatch, m *azservicebus.Message, options *azservicebus.AddMessageOptions) error {
	ret := _m.Called(batch, m, options)

	if len(ret) == 0 {
		panic("no return value specified for BatchAddMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*azservicebus.MessageBatch, *azservicebus.Message, *azservicebus.AddMessageOptions) error); ok {
		r0 = rf(batch, m, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields: _a0
func (_m *MsgSender) Close(_a0 context.Context) {
	_m.Called(_a0)
}

// GetAZClient provides a mock function with no fields
func (_m *MsgSender) GetAZClient() azbus.AZClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAZClient")
	}

	var r0 azbus.AZClient
	if rf, ok := ret.Get(0).(func() azbus.AZClient); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(azbus.AZClient)
	}

	return r0
}

// NewMessageBatch provides a mock function with given fields: _a0
func (_m *MsgSender) NewMessageBatch(_a0 context.Context) (*azservicebus.MessageBatch, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewMessageBatch")
	}

	var r0 *azservicebus.MessageBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*azservicebus.MessageBatch, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *azservicebus.MessageBatch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.MessageBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with no fields
func (_m *MsgSender) Open() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: _a0, _a1
func (_m *MsgSender) Send(_a0 context.Context, _a1 *azservicebus.Message) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *azservicebus.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendBatch provides a mock function with given fields: _a0, _a1
func (_m *MsgSender) SendBatch(_a0 context.Context, _a1 *azservicebus.MessageBatch) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *azservicebus.MessageBatch) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *MsgSender) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMsgSender creates a new instance of MsgSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsgSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MsgSender {
	mock := &MsgSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
