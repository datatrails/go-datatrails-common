// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"

	mock "github.com/stretchr/testify/mock"

	opentracing "github.com/opentracing/opentracing-go"
)

// MsgSender is an autogenerated mock type for the MsgSender type
type MsgSender struct {
	mock.Mock
}

type MsgSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MsgSender) EXPECT() *MsgSender_Expecter {
	return &MsgSender_Expecter{mock: &_m.Mock}
}

// BatchAddMessage provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MsgSender) BatchAddMessage(_a0 context.Context, _a1 opentracing.Span, _a2 *azservicebus.MessageBatch, _a3 *azservicebus.Message, _a4 *azservicebus.AddMessageOptions) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for BatchAddMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, opentracing.Span, *azservicebus.MessageBatch, *azservicebus.Message, *azservicebus.AddMessageOptions) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgSender_BatchAddMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchAddMessage'
type MsgSender_BatchAddMessage_Call struct {
	*mock.Call
}

// BatchAddMessage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 opentracing.Span
//   - _a2 *azservicebus.MessageBatch
//   - _a3 *azservicebus.Message
//   - _a4 *azservicebus.AddMessageOptions
func (_e *MsgSender_Expecter) BatchAddMessage(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MsgSender_BatchAddMessage_Call {
	return &MsgSender_BatchAddMessage_Call{Call: _e.mock.On("BatchAddMessage", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MsgSender_BatchAddMessage_Call) Run(run func(_a0 context.Context, _a1 opentracing.Span, _a2 *azservicebus.MessageBatch, _a3 *azservicebus.Message, _a4 *azservicebus.AddMessageOptions)) *MsgSender_BatchAddMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(opentracing.Span), args[2].(*azservicebus.MessageBatch), args[3].(*azservicebus.Message), args[4].(*azservicebus.AddMessageOptions))
	})
	return _c
}

func (_c *MsgSender_BatchAddMessage_Call) Return(_a0 error) *MsgSender_BatchAddMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgSender_BatchAddMessage_Call) RunAndReturn(run func(context.Context, opentracing.Span, *azservicebus.MessageBatch, *azservicebus.Message, *azservicebus.AddMessageOptions) error) *MsgSender_BatchAddMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: _a0
func (_m *MsgSender) Close(_a0 context.Context) {
	_m.Called(_a0)
}

// MsgSender_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MsgSender_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MsgSender_Expecter) Close(_a0 interface{}) *MsgSender_Close_Call {
	return &MsgSender_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *MsgSender_Close_Call) Run(run func(_a0 context.Context)) *MsgSender_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MsgSender_Close_Call) Return() *MsgSender_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MsgSender_Close_Call) RunAndReturn(run func(context.Context)) *MsgSender_Close_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageBatch provides a mock function with given fields: _a0
func (_m *MsgSender) NewMessageBatch(_a0 context.Context) (*azservicebus.MessageBatch, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewMessageBatch")
	}

	var r0 *azservicebus.MessageBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*azservicebus.MessageBatch, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *azservicebus.MessageBatch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.MessageBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MsgSender_NewMessageBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMessageBatch'
type MsgSender_NewMessageBatch_Call struct {
	*mock.Call
}

// NewMessageBatch is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MsgSender_Expecter) NewMessageBatch(_a0 interface{}) *MsgSender_NewMessageBatch_Call {
	return &MsgSender_NewMessageBatch_Call{Call: _e.mock.On("NewMessageBatch", _a0)}
}

func (_c *MsgSender_NewMessageBatch_Call) Run(run func(_a0 context.Context)) *MsgSender_NewMessageBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MsgSender_NewMessageBatch_Call) Return(_a0 *azservicebus.MessageBatch, _a1 error) *MsgSender_NewMessageBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MsgSender_NewMessageBatch_Call) RunAndReturn(run func(context.Context) (*azservicebus.MessageBatch, error)) *MsgSender_NewMessageBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields:
func (_m *MsgSender) Open() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgSender_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MsgSender_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *MsgSender_Expecter) Open() *MsgSender_Open_Call {
	return &MsgSender_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *MsgSender_Open_Call) Run(run func()) *MsgSender_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgSender_Open_Call) Return(_a0 error) *MsgSender_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgSender_Open_Call) RunAndReturn(run func() error) *MsgSender_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: _a0, _a1
func (_m *MsgSender) Send(_a0 context.Context, _a1 *azservicebus.Message) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *azservicebus.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MsgSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *azservicebus.Message
func (_e *MsgSender_Expecter) Send(_a0 interface{}, _a1 interface{}) *MsgSender_Send_Call {
	return &MsgSender_Send_Call{Call: _e.mock.On("Send", _a0, _a1)}
}

func (_c *MsgSender_Send_Call) Run(run func(_a0 context.Context, _a1 *azservicebus.Message)) *MsgSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*azservicebus.Message))
	})
	return _c
}

func (_c *MsgSender_Send_Call) Return(_a0 error) *MsgSender_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgSender_Send_Call) RunAndReturn(run func(context.Context, *azservicebus.Message) error) *MsgSender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendBatch provides a mock function with given fields: _a0, _a1
func (_m *MsgSender) SendBatch(_a0 context.Context, _a1 *azservicebus.MessageBatch) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *azservicebus.MessageBatch) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgSender_SendBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBatch'
type MsgSender_SendBatch_Call struct {
	*mock.Call
}

// SendBatch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *azservicebus.MessageBatch
func (_e *MsgSender_Expecter) SendBatch(_a0 interface{}, _a1 interface{}) *MsgSender_SendBatch_Call {
	return &MsgSender_SendBatch_Call{Call: _e.mock.On("SendBatch", _a0, _a1)}
}

func (_c *MsgSender_SendBatch_Call) Run(run func(_a0 context.Context, _a1 *azservicebus.MessageBatch)) *MsgSender_SendBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*azservicebus.MessageBatch))
	})
	return _c
}

func (_c *MsgSender_SendBatch_Call) Return(_a0 error) *MsgSender_SendBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgSender_SendBatch_Call) RunAndReturn(run func(context.Context, *azservicebus.MessageBatch) error) *MsgSender_SendBatch_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MsgSender) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MsgSender_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MsgSender_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MsgSender_Expecter) String() *MsgSender_String_Call {
	return &MsgSender_String_Call{Call: _e.mock.On("String")}
}

func (_c *MsgSender_String_Call) Run(run func()) *MsgSender_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgSender_String_Call) Return(_a0 string) *MsgSender_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgSender_String_Call) RunAndReturn(run func() string) *MsgSender_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMsgSender creates a new instance of MsgSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsgSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MsgSender {
	mock := &MsgSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
