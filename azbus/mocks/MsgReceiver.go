// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	azbus "github.com/datatrails/go-datatrails-common/azbus"

	mock "github.com/stretchr/testify/mock"
)

// MsgReceiver is an autogenerated mock type for the MsgReceiver type
type MsgReceiver struct {
	mock.Mock
}

// GetAZClient provides a mock function with no fields
func (_m *MsgReceiver) GetAZClient() azbus.AZClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAZClient")
	}

	var r0 azbus.AZClient
	if rf, ok := ret.Get(0).(func() azbus.AZClient); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(azbus.AZClient)
	}

	return r0
}

// Listen provides a mock function with no fields
func (_m *MsgReceiver) Listen() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: _a0
func (_m *MsgReceiver) Shutdown(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *MsgReceiver) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMsgReceiver creates a new instance of MsgReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsgReceiver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MsgReceiver {
	mock := &MsgReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
