// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
	azbus "github.com/rkvst/go-rkvstcommon/azbus"

	mock "github.com/stretchr/testify/mock"
)

// MsgReceiver is an autogenerated mock type for the MsgReceiver type
type MsgReceiver struct {
	mock.Mock
}

// Abandon provides a mock function with given fields: _a0, _a1, _a2
func (_m *MsgReceiver) Abandon(_a0 context.Context, _a1 error, _a2 *azservicebus.ReceivedMessage) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error, *azservicebus.ReceivedMessage) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields: _a0
func (_m *MsgReceiver) Close(_a0 context.Context) {
	_m.Called(_a0)
}

// Complete provides a mock function with given fields: _a0, _a1
func (_m *MsgReceiver) Complete(_a0 context.Context, _a1 *azservicebus.ReceivedMessage) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *azservicebus.ReceivedMessage) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeadLetter provides a mock function with given fields: _a0, _a1, _a2
func (_m *MsgReceiver) DeadLetter(_a0 context.Context, _a1 error, _a2 *azservicebus.ReceivedMessage) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error, *azservicebus.ReceivedMessage) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAZClient provides a mock function with given fields:
func (_m *MsgReceiver) GetAZClient() azbus.AZClient {
	ret := _m.Called()

	var r0 azbus.AZClient
	if rf, ok := ret.Get(0).(func() azbus.AZClient); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(azbus.AZClient)
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *MsgReceiver) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceiveMessages provides a mock function with given fields: _a0
func (_m *MsgReceiver) ReceiveMessages(_a0 azbus.Handler) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(azbus.Handler) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reschedule provides a mock function with given fields: _a0, _a1, _a2
func (_m *MsgReceiver) Reschedule(_a0 context.Context, _a1 error, _a2 *azservicebus.ReceivedMessage) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error, *azservicebus.ReceivedMessage) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *MsgReceiver) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMsgReceiver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgReceiver creates a new instance of MsgReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgReceiver(t mockConstructorTestingTNewMsgReceiver) *MsgReceiver {
	mock := &MsgReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
