// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
	mock "github.com/stretchr/testify/mock"
)

// OutMessageOption is an autogenerated mock type for the OutMessageOption type
type OutMessageOption struct {
	mock.Mock
}

type OutMessageOption_Expecter struct {
	mock *mock.Mock
}

func (_m *OutMessageOption) EXPECT() *OutMessageOption_Expecter {
	return &OutMessageOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *OutMessageOption) Execute(_a0 *azservicebus.Message) {
	_m.Called(_a0)
}

// OutMessageOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type OutMessageOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *azservicebus.Message
func (_e *OutMessageOption_Expecter) Execute(_a0 interface{}) *OutMessageOption_Execute_Call {
	return &OutMessageOption_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *OutMessageOption_Execute_Call) Run(run func(_a0 *azservicebus.Message)) *OutMessageOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*azservicebus.Message))
	})
	return _c
}

func (_c *OutMessageOption_Execute_Call) Return() *OutMessageOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *OutMessageOption_Execute_Call) RunAndReturn(run func(*azservicebus.Message)) *OutMessageOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutMessageOption creates a new instance of OutMessageOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutMessageOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutMessageOption {
	mock := &OutMessageOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
