---
# All targets that support linting and code analysis.
# DO NOT PUT CLEAN TARGETS or other developer conveniences in here

version: '3'

# Environment variables set for all commands.
env_build: &env_build
  # XDG_CACHE_HOME: This may need to be set for python builds, but try to use
  # virtual env instead.

  # The GOCACHE in a linux container on Docker for windows MUST be on a linuxy
  # file system
  GOCACHE: /tmp/jitsuin/avidcommon

vars:

  # Optional setting for some of the qa checks - set to -v
  VERBOSE: ""
  UNITTEST_DIR: "test_results"
  # empty or -tag tag1,tag2 ...
  GO_TEST_TAGS_OPT: ""

tasks:

  format:
    desc: Quality assurance of code
    summary: "format sources (go fmt)"
    dir: ../go-avidcommon
    cmds:
      - |
        for gomod in $(find . -type f -name go.mod); do
          echo "gofmt $(dirname $gomod)"
          gofmt -l -s -w $(dirname $gomod)
        done

  lint:
    dir: ../go-avidcommon
    desc: Quality assurance of code
    cmds:
      - pwd
      - |
        golangci-lint --version
        for gomod in $(find . -type f -name go.mod); do
          echo "go vet, goimports, golangci-lint for $(dirname $gomod)"
          d=$(dirname $gomod)
          go vet $d
          goimports {{.VERBOSE}} -w $d
          golangci-lint {{.VERBOSE}} run --timeout 10m $d
        done

  unit-tests:
    dir: ../go-avidcommon
    desc: "run unit tests"
    cmds:
      - |
        for gomod in $(find . -type f -name go.mod); do
          go test {{.GO_TEST_TAGS}} $(dirname $gomod)
        done
